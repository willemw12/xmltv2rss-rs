use derive_builder::Builder;
use xmltv::{Programme, Tv};

pub mod atom;
pub mod rss;

use crate::error::Error;
use crate::xmltv::DEFAULT_XMLTV_DATETIME_FORMAT;

pub const DEFAULT_FEED_CHANNEL_DESCRIPTION: &str = "Generated by xmltv2rss";
pub const DEFAULT_FEED_CHANNEL_TITLE: &str = "XMLTV feed";

pub const DEFAULT_FEED_DATE_FORMAT: &str = "%a %d %B, %Y";
pub const DEFAULT_FEED_TIME_FORMAT: &str = "%H:%M";

const GUID_DATETIME_FORMAT: &str = "%Y%m%d%H%M%S";

/// Feed export options struct.
#[derive(Builder)]
pub struct Options<'a> {
    #[builder(default, setter(into, strip_option))]
    pub language: Option<&'a str>,

    /// See [`DEFAULT_FEED_DATE_FORMAT`].
    #[builder(default = "DEFAULT_FEED_DATE_FORMAT")]
    pub date_format: &'a str,

    /// See [`DEFAULT_FEED_TIME_FORMAT`].
    #[builder(default = "DEFAULT_FEED_TIME_FORMAT")]
    pub time_format: &'a str,

    /// See [`DEFAULT_XMLTV_DATETIME_FORMAT`].
    #[builder(default = "DEFAULT_XMLTV_DATETIME_FORMAT")]
    pub xmltv_datetime_format: &'a str,
}

impl Default for Options<'_> {
    fn default() -> Self {
        Self {
            language: None,
            date_format: DEFAULT_FEED_DATE_FORMAT,
            time_format: DEFAULT_FEED_TIME_FORMAT,

            xmltv_datetime_format: DEFAULT_XMLTV_DATETIME_FORMAT,
        }
    }
}

//

/// XMLTV export trait.
pub trait Visitor {
    type Output;

    // fn visit_tv_start(&mut self) -> Result<()> {
    //     Ok(())
    // }

    #[allow(unused)]
    fn visit_tv(&mut self, listing: &Tv) -> Result<(), Error> {
        Ok(())
    }

    // fn visit_tv_end(&mut self) -> Result<()> {
    //     Ok(())
    // }

    //

    // fn visit_channels_start(&mut self) -> Result<()> {
    //     Ok(())
    // }
    //
    // #[allow(unused)]
    // fn visit_channel(&mut self, channel: &Channel) -> Result<()> {
    //     Ok(())
    // }
    //
    // fn visit_channels_end(&mut self) -> Result<()> {
    //     Ok(())
    // }

    //

    fn visit_programmes_start(&mut self) -> Result<(), Error> {
        Ok(())
    }

    #[allow(unused)]
    fn visit_programme(&mut self, programme: &Programme) -> Result<(), Error> {
        Ok(())
    }

    fn visit_programmes_end(&mut self) -> Result<(), Error> {
        Ok(())
    }

    //

    /// Returns the export result.
    fn result(&self) -> Result<Self::Output, Error>;
}

/// Exports XMLTV data to data of type T, produced by a visitor implementation.
pub(crate) fn export<T>(visitor: &mut impl Visitor<Output = T>, listing: &Tv) -> Result<T, Error> {
    // visitor.visit_tv_start()?;

    visitor.visit_tv(listing)?;

    // visitor.visit_channels_start()?;
    // for channel in &listing.channels {
    //     visitor.visit_channel(channel)?;
    // }
    // visitor.visit_channels_end()?;

    visitor.visit_programmes_start()?;
    for programme in &listing.programmes {
        visitor.visit_programme(programme)?;
    }
    visitor.visit_programmes_end()?;

    // visitor.visit_tv_end()?;

    visitor.result()
}
